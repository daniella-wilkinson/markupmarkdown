library(dplyr)
library(readr)
# data analysis
library(AER)
library(MASS)
library(lmerTest)
# data graphics
library(sf)
library(tigris)
library(table1)
library(ggplot2)
library(sjPlot)
library(viridis)
library(reactable)
library(htmlwidgets)
library(RColorBrewer)
getwd()
setwd("~/Desktop/Puerto Rico Pop. SVI/Data")
getwd()
list.files()
svi_2016 <- read.csv("svi16.csv")
svi_2022 <- read.csv("svi22.csv")
# delete duplicate row
svi_2016 <- svi_2016[-1,]
# acs_2016 <- read_dta("acs16.dta")
# acs_2022 <- read_dta("acs22.dta")
svi_2016 <- svi_2016 %>%
rename(
tot.pop = E_TOTPOP, tot.svi = RPL_THEMES, svi1 = RPL_THEME1, svi2 = RPL_THEME3,
svi3 = RPL_THEME2, svi4 = RPL_THEME4, var1 = EP_AGE65, var2 = EP_AGE17,
var3 = EP_MINRTY, var4 = EP_DISABL, var5 = EP_POV, var6 = EP_UNEMP, var7 = EP_NOHSDP
)
svi_2022 <- svi_2022 %>%
rename(
tot.pop = E_TOTPOP, tot.svi = RPL_THEMES, svi1 = RPL_THEME1, svi2 = RPL_THEME3,
svi3 = RPL_THEME2, svi4 = RPL_THEME4, var1 = EP_AGE65, var2 = EP_AGE17,
var3 = EP_MINRTY, var4 = EP_DISABL, var5 = EP_POV150, var6 = EP_UNEMP, var7 = EP_NOHSDP
)
###############################################################################################
svi_2022$COUNTY <- svi_2016$COUNTY
svi_2016$YEAR <- NA; svi_2016$YEAR <- 2016
svi_2022$YEAR <- NA; svi_2022$YEAR <- 2022
svi.sub_2016 <- subset(svi_2016, , c(COUNTY, FIPS, YEAR, tot.pop,
tot.svi, svi1, svi2, svi3, svi4, var1, var2, var3, var4, var5, var6, var7))
svi.sub_2022 <- subset(svi_2022, , c(COUNTY, FIPS, YEAR, tot.pop,
tot.svi, svi1, svi2, svi3, svi4, var1, var2, var3, var4, var5, var6, var7))
###############################################################################################
# str(pop_2016)
# str(pop_2022)
svi.sub_2016$FIPS <- as.integer(svi.sub_2016$FIPS)
svi.sub_2022$FIPS <- as.integer(svi.sub_2022$FIPS)
svi.sub_2016$tot.pop <- as.integer(svi.sub_2016$tot.pop)
svi.sub_2022$tot.pop <- as.integer(svi.sub_2022$tot.pop)
# str(pop_2016)
# str(pop_2022)
###############################################################################################
svi.sub_2016 <- svi.sub_2016 %>%
mutate(across(c(tot.pop, tot.svi, svi1, svi2, svi3, svi4, var1, var2, var3,
var4, var5, var6, var7), as.numeric))
svi.sub_2022 <- svi.sub_2022 %>%
mutate(across(c(tot.pop, tot.svi, svi1, svi2, svi3, svi4, var1, var2, var3,
var4, var5, var6, var7), as.numeric))
###############################################################################################
# combined.svi <- bind_rows(svi.sub_2016, svi.sub_2022) %>% arrange(FIPS, YEAR)
#| include: false
library(shiny)
library(haven)
library(ggplot2)
library(reactable)
#| include: false
pokedex <- read.csv("pokedex.csv"); pokedex$X <- NULL
pokedex.type <- read.csv("pokedex.type.csv"); pokedex.type$X <- NULL
region.2 <- subset(pokedex, Region == "Kanto", c(
Region, ID, Name, Type, Legendary, Sex, Height,
Height.ft, Height.Class, Weight, Weight.lbs, Weight.Class, Health, Attack,
Sp.Attack, Defense, Sp.Defense, Speed, Total, Abilities
))
reg_type.2 <- subset(pokedex.type,Region == "Kanto", c(
Region, ID, Name, Type, Legendary, Sex, Height,
Height.ft, Height.Class, Weight, Weight.lbs, Weight.Class, Health, Attack,
Sp.Attack, Defense, Sp.Defense, Speed, Total, Abilities
))
#| echo: false
reg_table.2 <- subset(region.2, , c(
ID, Name, Type, Health, Attack, Sp.Attack,
Defense, Sp.Defense, Speed, Total
))
###############################################################################################
colnames(reg_table.2)[colnames(reg_table.2) == "Sp.Attack"] <- "Attack+"
colnames(reg_table.2)[colnames(reg_table.2) == "Sp.Defense"] <- "Defense+"
color.scales <- function(x) rgb(colorRamp(c(
"white", "#FADA7A"))(x),
maxColorValue = 255)
###############################################################################################
reactable(
reg_table.2,
style = list(fontFamily = "Arial, sans-serif"),
# column styling
defaultColDef = colDef(
style = list(fontFamily = "Arial, sans-serif"),
align = "center",
vAlign = "center",
minWidth = 70,
headerStyle = list(background = "#f7f7f8")
),
columns = list(
# color scales : col 1
Health = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Health)) /
(max(reg_table.2$Health) - min(reg_table.2$Health))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 2
Attack = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Attack)) /
(max(reg_table.2$Attack) - min(reg_table.2$Attack))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 3
`Attack+` = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$`Attack+`)) /
(max(reg_table.2$`Attack+`) - min(reg_table.2$`Attack+`))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 4
Defense = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Defense)) /
(max(reg_table.2$Defense) - min(reg_table.2$Defense))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 5
`Defense+` = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$`Defense+`)) /
(max(reg_table.2$`Defense+`) - min(reg_table.2$`Defense+`))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 6
Speed = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Speed)) /
(max(reg_table.2$Speed) - min(reg_table.2$Speed))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 7
Total = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Total)) /
(max(reg_table.2$Total) - min(reg_table.2$Total))
color <- color.scales(normalized)
list(background = color)
}),
# column revisions
ID = colDef(minWidth = 50, filterable = FALSE),
Name = colDef(minWidth = 80, filterable = FALSE)
),
# table styling
# filterable = TRUE, minRows = 10,
filterable = TRUE,
searchable = TRUE,
borderless = TRUE,
# page parameter(s)
defaultPageSize = 10
)
#| echo: false
reg_table.2 <- subset(region.2, , c(
ID, Name, Type, Health, Attack, Sp.Attack,
Defense, Sp.Defense, Speed, Total
))
###############################################################################################
colnames(reg_table.2)[colnames(reg_table.2) == "Sp.Attack"] <- "Attack+"
colnames(reg_table.2)[colnames(reg_table.2) == "Sp.Defense"] <- "Defense+"
color.scales <- function(x) rgb(colorRamp(c(
"white", "#FF8383"))(x),
maxColorValue = 255)
###############################################################################################
reactable(
reg_table.2,
style = list(fontFamily = "Arial, sans-serif"),
# column styling
defaultColDef = colDef(
style = list(fontFamily = "Arial, sans-serif"),
align = "center",
vAlign = "center",
minWidth = 70,
headerStyle = list(background = "#f7f7f8")
),
columns = list(
# color scales : col 1
Health = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Health)) /
(max(reg_table.2$Health) - min(reg_table.2$Health))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 2
Attack = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Attack)) /
(max(reg_table.2$Attack) - min(reg_table.2$Attack))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 3
`Attack+` = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$`Attack+`)) /
(max(reg_table.2$`Attack+`) - min(reg_table.2$`Attack+`))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 4
Defense = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Defense)) /
(max(reg_table.2$Defense) - min(reg_table.2$Defense))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 5
`Defense+` = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$`Defense+`)) /
(max(reg_table.2$`Defense+`) - min(reg_table.2$`Defense+`))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 6
Speed = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Speed)) /
(max(reg_table.2$Speed) - min(reg_table.2$Speed))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 7
Total = colDef(style = function(value) {
normalized <- (value - min(reg_table.2$Total)) /
(max(reg_table.2$Total) - min(reg_table.2$Total))
color <- color.scales(normalized)
list(background = color)
}),
# column revisions
ID = colDef(minWidth = 50, filterable = FALSE),
Name = colDef(minWidth = 80, filterable = FALSE)
),
# table styling
# filterable = TRUE, minRows = 10,
filterable = TRUE,
searchable = TRUE,
borderless = TRUE,
# page parameter(s)
defaultPageSize = 10
)
View(pokedex)
#| echo: false
ggplot(reg_type.1, aes(x = Type)) +
geom_bar(fill = "#FADA7A") +
ggtitle("Pokémon Type Distribution in Kanto") +
labs(x = "Pokémon Type", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| include: false
library(haven)
library(ggplot2)
library(reactable)
###############################################################################################
pokedex <- read.csv("pokedex.csv"); pokedex$X <- NULL
pokedex.type <- read.csv("pokedex.type.csv"); pokedex.type$X <- NULL
###############################################################################################
region.1 <- subset(pokedex, Region == "Kanto", c(
Region, ID, Name, Type, Legendary, Sex, Height,
Height.ft, Height.Class, Weight, Weight.lbs, Weight.Class, Health, Attack,
Sp.Attack, Defense, Sp.Defense, Speed, Total, Abilities
))
reg_type.1 <- subset(pokedex.type,Region == "Kanto", c(
Region, ID, Name, Type, Legendary, Sex, Height,
Height.ft, Height.Class, Weight, Weight.lbs, Weight.Class, Health, Attack,
Sp.Attack, Defense, Sp.Defense, Speed, Total, Abilities
))
#| echo: false
reg_table.1 <- subset(region.1, , c(
ID, Name, Type, Health, Attack, Sp.Attack,
Defense, Sp.Defense, Speed, Total
))
###############################################################################################
colnames(reg_table.1)[colnames(reg_table.1) == "Sp.Attack"] <- "Attack+"
colnames(reg_table.1)[colnames(reg_table.1) == "Sp.Defense"] <- "Defense+"
color.scales <- function(x) rgb(colorRamp(c(
"white", "#FADA7A"))(x),
maxColorValue = 255)
###############################################################################################
reactable(
reg_table.1,
style = list(fontFamily = "Arial, sans-serif"),
# column styling
defaultColDef = colDef(
style = list(fontFamily = "Arial, sans-serif"),
align = "center",
vAlign = "center",
minWidth = 70,
headerStyle = list(background = "#f7f7f8")
),
columns = list(
# color scales : col 1
Health = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$Health)) /
(max(reg_table.1$Health) - min(reg_table.1$Health))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 2
Attack = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$Attack)) /
(max(reg_table.1$Attack) - min(reg_table.1$Attack))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 3
`Attack+` = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$`Attack+`)) /
(max(reg_table.1$`Attack+`) - min(reg_table.1$`Attack+`))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 4
Defense = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$Defense)) /
(max(reg_table.1$Defense) - min(reg_table.1$Defense))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 5
`Defense+` = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$`Defense+`)) /
(max(reg_table.1$`Defense+`) - min(reg_table.1$`Defense+`))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 6
Speed = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$Speed)) /
(max(reg_table.1$Speed) - min(reg_table.1$Speed))
color <- color.scales(normalized)
list(background = color)
}),
# color scales : col 7
Total = colDef(style = function(value) {
normalized <- (value - min(reg_table.1$Total)) /
(max(reg_table.1$Total) - min(reg_table.1$Total))
color <- color.scales(normalized)
list(background = color)
}),
# column revisions
ID = colDef(minWidth = 50, filterable = FALSE),
Name = colDef(minWidth = 80, filterable = FALSE)
),
# table styling
# filterable = TRUE, minRows = 10,
filterable = TRUE,
searchable = TRUE,
borderless = TRUE,
# page parameter(s)
defaultPageSize = 10
)
#| echo: false
ggplot(reg_type.1, aes(x = Type)) +
geom_bar(fill = "#FADA7A") +
ggtitle("Pokémon Type Distribution in Kanto") +
labs(x = "Pokémon Type", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| echo: false
ggplot(region.1, aes(x = Health)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Health Distribution in Kanto",
x = "Total Health",
y = "Frequency"
) +
theme_minimal()
#| echo: false
ggplot(region.1, aes(x = Health)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Health Distribution in Kanto",
x = "Total Health",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.1, aes(x = Attack)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Attack Distribution in Kanto",
x = "Total Attack",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.1, aes(x = Sp.Attack)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Attack+ Distribution in Kanto",
x = "Total Attack+",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.1, aes(x = Defense)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Defense Distribution in Kanto",
x = "Total Defense",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.1, aes(x = Sp.Defense)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Defense+ Distribution in Kanto",
x = "Total Defense+",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.1, aes(x = Speed)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Speed Distribution in Kanto",
x = "Total Speed",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.1, aes(x = Total)) +
geom_histogram(binwidth = 10, fill = "#FADA7A", color = "white", alpha = 1) +
labs(
title = "Pokémon Power Distribution in Kanto",
x = "Total Total",
y = "Frequency"
) +
theme_minimal()
#| echo: true
ggplot(reg_type.2, aes(x = Type)) +
geom_bar(fill = "#C7DB9C") +
ggtitle("Pokémon Type Distribution in Johto") +
labs(x = "Pokémon Type", y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| echo: false
ggplot(region.2, aes(x = Health)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Health Distribution in Johto",
x = "Total Health",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.2, aes(x = Attack)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Attack Distribution in Johto",
x = "Total Attack",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.2, aes(x = Sp.Attack)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Attack+ Distribution in Johto",
x = "Total Attack+",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.2, aes(x = Defense)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Defense Distribution in Johto",
x = "Total Defense",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.2, aes(x = Sp.Defense)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Defense+ Distribution in Johto",
x = "Total Defense+",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.2, aes(x = Speed)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Speed Distribution in Johto",
x = "Total Speed",
y = "Frequency"
) +
theme_minimal()
################################################################################################################################
ggplot(region.2, aes(x = Total)) +
geom_histogram(binwidth = 10, fill = "#C7DB9C", color = "white", alpha = 1) +
labs(
title = "Pokémon Power Distribution in Johto",
x = "Total Total",
y = "Frequency"
) +
theme_minimal()
