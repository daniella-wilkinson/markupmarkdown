{"title":"Welcome Trainer!","markdown":{"yaml":{"title":"Welcome Trainer!","subtitle":"Explore, analyze, and master the Pokédex with ease—your interactive,  accessible, and engaging guide to Pokémon metadata. Dive into the data  to discover what makes each region distinct, and explore the intricate  relationships between species, climate, and geography.\n","title-block-banner":true,"title-block-style":"default","page-layout":"full"},"headingText":"Markup, Markdown","containsRefs":false,"markdown":"\n\n\nMarkdown is a lightweight markup language designed for creating formatted text using a simple, readable syntax. Without relying on word processors, it allows users to structure documents with headings, lists, links, code chunks, code blocks, and other elements. Primarily used for documentation, blogging, and technical writing, Markdown is widely supported across platforms, making it an efficient and versatile tool for writing content that can be easily converted into HTML, PDFs, or other formats.\n\n### Quarto\n\n[Quarto](https://quarto.org/ \"learn more\") is a powerful, multi-language publishing system designed to be the next-generation evolution of R Markdown. Posit PBC acquired RStudio in November 2022 and introduced Quarto, an enhanced dynamic and reproducible document creation tool, without plans to deprecate R Markdown or R Notebook. This ensures that long-time users of R Markdown can continue using their existing workflows while benefiting from Quarto’s expanded capabilities. Quarto provides seamless support for multiple programming languages, including R, Python, Julia, and Observable JavaScript, making it a flexible solution for data scientists, researchers, and analysts across different platforms. With a strong emphasis on accessibility and ease of use, Quarto maintains an interface and command structure nearly identical to R Markdown, allowing users to transition smoothly.\n\nOne of Quarto’s most notable strengths is its diverse output formats, enabling users to create high-quality PDFs, interactive websites, presentations, dashboards, and web applications. Its enhanced publishing options make it well-suited for producing technical reports, academic papers, books, and scientific journals. Additionally, Quarto integrates well with modern tools like GitHub Pages and Decap (Netlify), streamlining the process of sharing results with a broader audience. With these improvements, Quarto represents a significant step forward in dynamic document generation. It offers greater flexibility, multi-language functionality, and a wider range of publishing capabilities while retaining the familiarity of R Markdown for existing users.\n\n#### Create a Document \n\nCreating a document in Quarto (`.qmd` file) involves a straightforward process that combines Markdown for text formatting, code chunks for computation, and YAML metadata for document configuration. To start, you first need to install Quarto on your system and ensure it is properly set up. Once installed, you can create a new `.qmd` file using any text editor, such as VS Code or RStudio. The `.qmd` file serves as a structured document where you can write formatted text, embed code, and generate outputs like HTML, PDF, or Word documents.\n\nA Quarto document typically begins with a **YAML header**, enclosed by triple dashes (`---`). This header defines metadata such as the document’s title, author, format, and other settings. For example, a basic YAML header might look like this:\n\n![](images/quarto1.png){fig-align=\"center\"}\n\nBelow the YAML header, you can write content using **Markdown syntax** to structure headings, lists, tables, and inline formatting. You can also embed **code chunks** using languages like R or Python. Code chunks are enclosed within triple backticks (\\`\\`\\`) and specify the programming language used. For instance, an R code chunk that generates a plot might look like this:\n\n![](images/quarto4.png){fig-align=\"center\"}\n\n#### Format a Document \n\nQuarto provides various output options for code chunks, allowing users to control how code and its results appear in the final document. These options are essential for tailoring the presentation of computational content, whether in reports, blogs, or interactive documents. The key settings for code chunk outputs are specified within chunk options, which are placed inside `{}` after the triple back-ticks (\\`\\`\\`) that define the code block. Users can modify these options to show or hide code, display only the results, format output styling, or manage figure properties.\n\nOne of the most commonly used options is `echo`, which controls whether the source code is displayed in the rendered output. Setting `echo: false` hides the code while still displaying the results, making it useful for polished reports where only the output matters. Conversely, `eval` determines whether the code is executed at all—when set to `eval: false`, the code appears in the document but does not run, useful for showing examples without executing them. Another key option, `include`, determines whether both the code and its results are included in the output; setting `include: false` ensures neither appear in the final document, useful for background computations.\n\nFor controlling how figures and tables appear, Quarto provides options like `fig-width`, `fig-height`, and `fig-align`, which adjust the size and alignment of plots. Additionally, `message` and `warning` options allow users to suppress or display messages and warnings generated by code execution. Quarto also supports output options tailored to specific formats, such as using `code-fold: true` to enable collapsible code sections in HTML documents, enhancing readability for interactive reports. By leveraging these output settings, users can fine-tune the presentation of their computational content, ensuring clarity and relevance in their Quarto documents.\n\n![](images/quarto5.png){fig-align=\"center\"}\n\n#### Render a Document \n\n![](images/quarto3.png){fig-align=\"center\"}\n\n![](images/quarto2.png){fig-align=\"center\"}\n\nThe rendering process in Quarto converts a `.qmd` file into a fully formatted document, such as a **PDF** or **Word (`.docx`) file**, by processing the Markdown content, executing embedded code chunks, and applying the specified output format settings. This process ensures that the final document integrates both text and computational results in a structured, visually appealing manner. Rendering can be performed using the Quarto command line (`quarto render myfile.qmd`) or through an IDE like RStudio, where users can select the desired output format.\n\nTo generate a **PDF**, Quarto relies on **LaTeX**, meaning you must have a LaTeX distribution (such as **TeX Live, TinyTeX, or MiKTeX**) installed on your system. When rendering a PDF, Quarto converts the Markdown content into LaTeX and then compiles it into a `.pdf` file. Users can customize the output using LaTeX templates and options such as `pdf-engine: xelatex` for additional font support. The YAML header might look like this:\n\nFor a **Word document**, Quarto generates a `.docx` file by converting the Markdown and code output into a Word-compatible format. Unlike PDFs, Word documents allow for easier post-rendering edits, making them ideal for collaborative reports. The rendering process ensures that tables, figures, and code output are correctly formatted, and users can apply custom Word templates by specifying a reference document (`reference-doc`). The YAML header for Word output might look like this:\n\nDuring the rendering process, Quarto executes code chunks (if present), embeds their results in the document, and applies formatting rules based on the specified output format. Once completed, the final file is saved in the output directory, ready for distribution or further editing. This flexible rendering system allows users to produce high-quality documents tailored to their needs, whether for publication, collaboration, or presentation.\n\n![](images/quarto6.png){fig-align=\"center\"}\n\n### Activity 1\n\nDownload the CSV files below to begin the assignment. Recreate the example provided and configure a PDF or Word document to continue editing your report produced in Quarto to ensure it is of high quality for submission.\n\n[Download Pokedex 1](/pokedex.csv)\n\n[Download Pokedex 2](/pokedex.type.csv)\n\n[Download Incomplete Activity Example](/Activity.qmd)\n\n[Download Complete Activity Example](/Activity.pdf)\n\n### Activity 2\n\nNow that you've understood how everything works produce an original report in Quarto based on your research and render the document as a Word or PDF for final submission.\n","srcMarkdownNoYaml":"\n\n# Markup, Markdown\n\nMarkdown is a lightweight markup language designed for creating formatted text using a simple, readable syntax. Without relying on word processors, it allows users to structure documents with headings, lists, links, code chunks, code blocks, and other elements. Primarily used for documentation, blogging, and technical writing, Markdown is widely supported across platforms, making it an efficient and versatile tool for writing content that can be easily converted into HTML, PDFs, or other formats.\n\n### Quarto\n\n[Quarto](https://quarto.org/ \"learn more\") is a powerful, multi-language publishing system designed to be the next-generation evolution of R Markdown. Posit PBC acquired RStudio in November 2022 and introduced Quarto, an enhanced dynamic and reproducible document creation tool, without plans to deprecate R Markdown or R Notebook. This ensures that long-time users of R Markdown can continue using their existing workflows while benefiting from Quarto’s expanded capabilities. Quarto provides seamless support for multiple programming languages, including R, Python, Julia, and Observable JavaScript, making it a flexible solution for data scientists, researchers, and analysts across different platforms. With a strong emphasis on accessibility and ease of use, Quarto maintains an interface and command structure nearly identical to R Markdown, allowing users to transition smoothly.\n\nOne of Quarto’s most notable strengths is its diverse output formats, enabling users to create high-quality PDFs, interactive websites, presentations, dashboards, and web applications. Its enhanced publishing options make it well-suited for producing technical reports, academic papers, books, and scientific journals. Additionally, Quarto integrates well with modern tools like GitHub Pages and Decap (Netlify), streamlining the process of sharing results with a broader audience. With these improvements, Quarto represents a significant step forward in dynamic document generation. It offers greater flexibility, multi-language functionality, and a wider range of publishing capabilities while retaining the familiarity of R Markdown for existing users.\n\n#### Create a Document \n\nCreating a document in Quarto (`.qmd` file) involves a straightforward process that combines Markdown for text formatting, code chunks for computation, and YAML metadata for document configuration. To start, you first need to install Quarto on your system and ensure it is properly set up. Once installed, you can create a new `.qmd` file using any text editor, such as VS Code or RStudio. The `.qmd` file serves as a structured document where you can write formatted text, embed code, and generate outputs like HTML, PDF, or Word documents.\n\nA Quarto document typically begins with a **YAML header**, enclosed by triple dashes (`---`). This header defines metadata such as the document’s title, author, format, and other settings. For example, a basic YAML header might look like this:\n\n![](images/quarto1.png){fig-align=\"center\"}\n\nBelow the YAML header, you can write content using **Markdown syntax** to structure headings, lists, tables, and inline formatting. You can also embed **code chunks** using languages like R or Python. Code chunks are enclosed within triple backticks (\\`\\`\\`) and specify the programming language used. For instance, an R code chunk that generates a plot might look like this:\n\n![](images/quarto4.png){fig-align=\"center\"}\n\n#### Format a Document \n\nQuarto provides various output options for code chunks, allowing users to control how code and its results appear in the final document. These options are essential for tailoring the presentation of computational content, whether in reports, blogs, or interactive documents. The key settings for code chunk outputs are specified within chunk options, which are placed inside `{}` after the triple back-ticks (\\`\\`\\`) that define the code block. Users can modify these options to show or hide code, display only the results, format output styling, or manage figure properties.\n\nOne of the most commonly used options is `echo`, which controls whether the source code is displayed in the rendered output. Setting `echo: false` hides the code while still displaying the results, making it useful for polished reports where only the output matters. Conversely, `eval` determines whether the code is executed at all—when set to `eval: false`, the code appears in the document but does not run, useful for showing examples without executing them. Another key option, `include`, determines whether both the code and its results are included in the output; setting `include: false` ensures neither appear in the final document, useful for background computations.\n\nFor controlling how figures and tables appear, Quarto provides options like `fig-width`, `fig-height`, and `fig-align`, which adjust the size and alignment of plots. Additionally, `message` and `warning` options allow users to suppress or display messages and warnings generated by code execution. Quarto also supports output options tailored to specific formats, such as using `code-fold: true` to enable collapsible code sections in HTML documents, enhancing readability for interactive reports. By leveraging these output settings, users can fine-tune the presentation of their computational content, ensuring clarity and relevance in their Quarto documents.\n\n![](images/quarto5.png){fig-align=\"center\"}\n\n#### Render a Document \n\n![](images/quarto3.png){fig-align=\"center\"}\n\n![](images/quarto2.png){fig-align=\"center\"}\n\nThe rendering process in Quarto converts a `.qmd` file into a fully formatted document, such as a **PDF** or **Word (`.docx`) file**, by processing the Markdown content, executing embedded code chunks, and applying the specified output format settings. This process ensures that the final document integrates both text and computational results in a structured, visually appealing manner. Rendering can be performed using the Quarto command line (`quarto render myfile.qmd`) or through an IDE like RStudio, where users can select the desired output format.\n\nTo generate a **PDF**, Quarto relies on **LaTeX**, meaning you must have a LaTeX distribution (such as **TeX Live, TinyTeX, or MiKTeX**) installed on your system. When rendering a PDF, Quarto converts the Markdown content into LaTeX and then compiles it into a `.pdf` file. Users can customize the output using LaTeX templates and options such as `pdf-engine: xelatex` for additional font support. The YAML header might look like this:\n\nFor a **Word document**, Quarto generates a `.docx` file by converting the Markdown and code output into a Word-compatible format. Unlike PDFs, Word documents allow for easier post-rendering edits, making them ideal for collaborative reports. The rendering process ensures that tables, figures, and code output are correctly formatted, and users can apply custom Word templates by specifying a reference document (`reference-doc`). The YAML header for Word output might look like this:\n\nDuring the rendering process, Quarto executes code chunks (if present), embeds their results in the document, and applies formatting rules based on the specified output format. Once completed, the final file is saved in the output directory, ready for distribution or further editing. This flexible rendering system allows users to produce high-quality documents tailored to their needs, whether for publication, collaboration, or presentation.\n\n![](images/quarto6.png){fig-align=\"center\"}\n\n### Activity 1\n\nDownload the CSV files below to begin the assignment. Recreate the example provided and configure a PDF or Word document to continue editing your report produced in Quarto to ensure it is of high quality for submission.\n\n[Download Pokedex 1](/pokedex.csv)\n\n[Download Pokedex 2](/pokedex.type.csv)\n\n[Download Incomplete Activity Example](/Activity.qmd)\n\n[Download Complete Activity Example](/Activity.pdf)\n\n### Activity 2\n\nNow that you've understood how everything works produce an original report in Quarto based on your research and render the document as a Word or PDF for final submission.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"lessons.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","editor":"visual","grid":{"sidebar-width":"300px","body-width":"900px","margin-width":"300px","gutter-width":"1.5rem"},"smooth-scroll":true,"theme":["cosmo","brand"],"title":"Welcome Trainer!","subtitle":"Explore, analyze, and master the Pokédex with ease—your interactive,  accessible, and engaging guide to Pokémon metadata. Dive into the data  to discover what makes each region distinct, and explore the intricate  relationships between species, climate, and geography.\n","title-block-banner":true,"title-block-style":"default","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}